{
  "comments": [
    {
      "key": {
        "uuid": "498fbe49_a5743b1d",
        "filename": "JNIHelp.cpp",
        "patchSetId": 4
      },
      "lineNbr": 364,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2018-11-01T16:59:01Z",
      "side": 1,
      "message": "should be _GNU_SOURCE. __USE_GNU is an internal implementation detail.",
      "range": {
        "startLine": 364,
        "startChar": 26,
        "endLine": 364,
        "endChar": 35
      },
      "revId": "5480ec635019518f74e3c03044bf97972942f295",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6b04a290_80c87a23",
        "filename": "JNIHelp.cpp",
        "patchSetId": 4
      },
      "lineNbr": 364,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2018-11-01T17:13:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "498fbe49_a5743b1d",
      "range": {
        "startLine": 364,
        "startChar": 26,
        "endLine": 364,
        "endChar": 35
      },
      "revId": "5480ec635019518f74e3c03044bf97972942f295",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "50b0ffb5_613a1e2f",
        "filename": "JNIHelp.cpp",
        "patchSetId": 4
      },
      "lineNbr": 369,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2018-11-01T16:59:01Z",
      "side": 1,
      "message": "yeah, i think the right fix is to ensure that the host bionic build looks like a platform build (since it\u0027s using those headers).",
      "revId": "5480ec635019518f74e3c03044bf97972942f295",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "be900aa9_a331dde4",
        "filename": "JNIHelp.cpp",
        "patchSetId": 4
      },
      "lineNbr": 369,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2018-11-01T17:13:27Z",
      "side": 1,
      "message": "Ack.\n\nIt seems that the mess of __ANDROID__ and bionic and so on makes this difficult.",
      "parentUuid": "50b0ffb5_613a1e2f",
      "revId": "5480ec635019518f74e3c03044bf97972942f295",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a7c8ca8d_3ab467df",
        "filename": "JNIHelp.cpp",
        "patchSetId": 4
      },
      "lineNbr": 369,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2018-11-01T17:18:38Z",
      "side": 1,
      "message": "hang on though... this is a .cpp file, so `_GNU_SOURCE` is on by default (which is why your other test is just `__GLIBC__`). so do you actually just want `__GLIBC__ || __BIONIC__` (or alternatively, `!defined(__APPLE__)`)?",
      "parentUuid": "be900aa9_a331dde4",
      "revId": "5480ec635019518f74e3c03044bf97972942f295",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a48307d_dceb35d7",
        "filename": "JNIHelp.cpp",
        "patchSetId": 4
      },
      "lineNbr": 369,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2018-11-01T17:52:14Z",
      "side": 1,
      "message": "Tried that and it failed.\n\nI think the issue is that this is sometimes built with the NDK and linux_bionic builds run with -U__ANDROID__ but I\u0027m not totally sure and this seemed like the simplest solution.",
      "parentUuid": "a7c8ca8d_3ab467df",
      "revId": "5480ec635019518f74e3c03044bf97972942f295",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4a72a79a_344da777",
        "filename": "JNIHelp.cpp",
        "patchSetId": 4
      },
      "lineNbr": 369,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2018-11-01T18:51:36Z",
      "side": 1,
      "message": "tried which? (`-U__ANDROID__` wouldn\u0027t affect `__BIONIC__`, which is what you _should_ be checking.)",
      "parentUuid": "7a48307d_dceb35d7",
      "revId": "5480ec635019518f74e3c03044bf97972942f295",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fc49d98a_c5cc797f",
        "filename": "JNIHelp.cpp",
        "patchSetId": 4
      },
      "lineNbr": 369,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2018-11-01T20:13:40Z",
      "side": 1,
      "message": "sorry I should have been clearer. It doesn\u0027t work on due to some device build targets. For example:\n\n[ 70% 6281/8960] //libnativehelper:libnativehelper clang++ JNIHelp.cpp\nFAILED: /fast/allight/android-build/walleye/aosp1/userdebug/soong/.intermediates/libnativehelper/libnativehelper/android_arm64_armv8-a_cortex-a73_core_static_cfi_platform/obj/libnativehelper/JNIHelp.o\nPWD\u003d/proc/self/cwd prebuilts/clang/host/linux-x86/clang-r339409b/bin/clang++ -c -Ilibnativehelper/include -Ilibnativehelper  -Werror\u003dimplicit-function-declaration -DANDROID -fmessage-length\u003d0 -W -Wall -Wno-unused -Winit-self -Wpointer-arith -no-canonical-prefixes -DNDEBUG -UDEBUG -fno-exceptions -Wno-multichar -O2 -g -fno-strict-aliasing -fdebug-prefix-map\u003d/proc/self/cwd\u003d -D__compiler_offsetof\u003d__builtin_offsetof -Wimplicit-fallthrough -Wno-error\u003dimplicit-fallthrough -Werror\u003dint-conversion -Wno-reserved-id-macro -Wno-format-pedantic -Wno-unused-command-line-argument -fcolor-diagnostics -Wno-expansion-to-defined -Wno-zero-as-null-pointer-constant -Wno-deprecated-register -Wno-sign-compare -ffunction-sections -fdata-sections -fno-short-enums -funwind-tables -fstack-protector-strong -Wa,--noexecstack -D_FORTIFY_SOURCE\u003d2 -Wstrict-aliasing\u003d2 -Werror\u003dreturn-type -Werror\u003dnon-virtual-dtor -Werror\u003daddress -Werror\u003dsequence-point -Werror\u003ddate-time -Werror\u003dformat-security -nostdlibinc -march\u003darmv8-a -mcpu\u003dcortex-a53 -Ilibnativehelper/include_jni -Ilibnativehelper/header_only_include -Ilibnativehelper/platform_include -Iexternal/libcxx/include -Iexternal/libcxxabi/include -Isystem/core/liblog/include -Isystem/core/include -Isystem/media/audio/include -Ihardware/libhardware/include -Ihardware/libhardware_legacy/include -Ihardware/ril/include -Ilibnativehelper/include -Iframeworks/native/include -Iframeworks/native/opengl/include -Iframeworks/av/include -isystem bionic/libc/include -isystem bionic/libc/kernel/uapi -isystem bionic/libc/kernel/uapi/asm-arm64 -isystem bionic/libc/kernel/android/scsi -isystem bionic/libc/kernel/android/uapi -Ilibnativehelper/include_jni -Werror -fvisibility\u003dprotected -target aarch64-linux-android -Bprebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/aarch64-linux-android/bin -DANDROID_STRICT -fPIC -D_USING_LIBCXX -flto -fsanitize-cfi-cross-dso -fsanitize-blacklist\u003dexternal/compiler-rt/lib/cfi/cfi_blacklist.txt -fvisibility\u003ddefault -fsanitize\u003dcfi -fsanitize-trap\u003dall -ftrap-function\u003dabort -std\u003dgnu++14 -Wsign-promo -Wno-inconsistent-missing-override -Wno-null-dereference -D_LIBCPP_ENABLE_THREAD_SAFETY_ANNOTATIONS -Wno-thread-safety-negative -Wno-gnu-include-next -fvisibility-inlines-hidden -fno-rtti  -Werror\u003dint-to-pointer-cast -Werror\u003dpointer-to-int-cast -Werror\u003daddress-of-temporary -Werror\u003dreturn-type -Wno-tautological-constant-compare -Wno-tautological-type-limit-compare -Wno-tautological-unsigned-enum-zero-compare -Wno-tautological-unsigned-zero-compare -Wno-null-pointer-arithmetic -Wno-enum-compare -Wno-enum-compare-switch -Wno-c++98-compat-extra-semi -Wno-self-assign-overloaded -Wno-constant-logical-operand -Wno-return-std-move-in-c++11 -Wno-dangling-field -MD -MF /fast/allight/android-build/walleye/aosp1/userdebug/soong/.intermediates/libnativehelper/libnativehelper/android_arm64_armv8-a_cortex-a73_core_static_cfi_platform/obj/libnativehelper/JNIHelp.o.d -o /fast/allight/android-build/walleye/aosp1/userdebug/soong/.intermediates/libnativehelper/libnativehelper/android_arm64_armv8-a_cortex-a73_core_static_cfi_platform/obj/libnativehelper/JNIHelp.o libnativehelper/JNIHelp.cpp\nlibnativehelper/JNIHelp.cpp:370:12: error: cannot initialize return object of type \u0027const char *\u0027 with an rvalue of type \u0027int\u0027\n    return strerror_r(errnum, buf, buflen);\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n1 error generated.",
      "parentUuid": "4a72a79a_344da777",
      "revId": "5480ec635019518f74e3c03044bf97972942f295",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c83eeae6_02c3f784",
        "filename": "JNIHelp.cpp",
        "patchSetId": 4
      },
      "lineNbr": 369,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2018-11-01T20:18:11Z",
      "side": 1,
      "message": "that was with what `#if`?",
      "parentUuid": "fc49d98a_c5cc797f",
      "revId": "5480ec635019518f74e3c03044bf97972942f295",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0456f433_a39acc80",
        "filename": "JNIHelp.cpp",
        "patchSetId": 4
      },
      "lineNbr": 369,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2018-11-01T23:50:20Z",
      "side": 1,
      "message": "__GLIBC__ || __BIONIC__",
      "parentUuid": "c83eeae6_02c3f784",
      "revId": "5480ec635019518f74e3c03044bf97972942f295",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "32136fb2_652b37e9",
        "filename": "JNIHelp.cpp",
        "patchSetId": 4
      },
      "lineNbr": 369,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2018-11-02T01:44:16Z",
      "side": 1,
      "message": "should you have used `defined()` instead?\n\nsomething isn\u0027t right here, and it seems like we should get to the bottom of that.",
      "parentUuid": "0456f433_a39acc80",
      "revId": "5480ec635019518f74e3c03044bf97972942f295",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a2deb8a_7e6b2d6f",
        "filename": "JNIHelp.cpp",
        "patchSetId": 4
      },
      "lineNbr": 369,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2018-11-05T21:14:46Z",
      "side": 1,
      "message": "Tried that too. Same result.\n\nI agree something is screwy with how we build this file.\n\nFor now though we want host bionic for testing and this seems to be the easiest way",
      "parentUuid": "32136fb2_652b37e9",
      "revId": "5480ec635019518f74e3c03044bf97972942f295",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d6e07f86_ebbab1f5",
        "filename": "JNIHelp.cpp",
        "patchSetId": 4
      },
      "lineNbr": 369,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2018-11-05T21:23:34Z",
      "side": 1,
      "message": "i think you should work with dwillemsen to work out what\u0027s going wrong here before going any further. if this isn\u0027t working right, something\u0027s badly broken with the host bionic configuration.",
      "parentUuid": "0a2deb8a_7e6b2d6f",
      "revId": "5480ec635019518f74e3c03044bf97972942f295",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b48829f1_8449ff3c",
        "filename": "JNIHelp.cpp",
        "patchSetId": 4
      },
      "lineNbr": 369,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2018-11-05T21:46:06Z",
      "side": 1,
      "message": "enh@, dwillemsen@\n\nLooking through the whole file I found this up at the top:\n\n    #if defined(__ANDROID__)\n    /* libnativehelper is built by NDK 19 in one variant, which doesn\u0027t yet have the GNU strerror_r. \n     */\n    #undef _GNU_SOURCE\n    /* ...but this code uses asprintf, which is a BSD/GNU extension. */\n    #define _BSD_SOURCE\n    #endif\n\nI imagine this is what\u0027s causing the problem. Just changing the __ANDROID__ to __BIONIC__ doesn\u0027t fix it though. Any idea what this is supposed to do or how we could get it working correctly.",
      "parentUuid": "d6e07f86_ebbab1f5",
      "revId": "5480ec635019518f74e3c03044bf97972942f295",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "19ff451d_82f438dd",
        "filename": "JNIHelp.cpp",
        "patchSetId": 4
      },
      "lineNbr": 369,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2018-11-05T21:52:52Z",
      "side": 1,
      "message": "the CL that added that said:\n\n  Fix libnativehelper strerror_r build break.\n\n  We can remove this when there\u0027s a newer NDK to build with.\n\n  Change-Id: I2b4dccd720954f40abc3753028187e413fc0b3c8\n\nso i\u0027m assuming you can just remove this cruft?",
      "parentUuid": "b48829f1_8449ff3c",
      "revId": "5480ec635019518f74e3c03044bf97972942f295",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3b13a7e3_782202e6",
        "filename": "JNIHelp.cpp",
        "patchSetId": 4
      },
      "lineNbr": 369,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2018-11-05T22:49:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "19ff451d_82f438dd",
      "revId": "5480ec635019518f74e3c03044bf97972942f295",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}