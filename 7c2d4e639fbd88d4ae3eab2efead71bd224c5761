{
  "comments": [
    {
      "key": {
        "uuid": "33dbcdd6_9d46ffa3",
        "filename": "JniConstants.cpp",
        "patchSetId": 19
      },
      "lineNbr": 120,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2019-01-03T19:22:08Z",
      "side": 1,
      "message": "Is there a race here, with this test possibly occurring while g_string_class is being initialized? Hopefully there isn\u0027t a race with Uninitialize()?\n\nDo the other methods have similar issues?\n\nIf FindMethod and FindClass are pure functions, which don\u0027t alter state, then this may be fixable without significant performance loss by using memory_order_relaxed atomic accesses.",
      "range": {
        "startLine": 120,
        "startChar": 8,
        "endLine": 120,
        "endChar": 33
      },
      "revId": "7c2d4e639fbd88d4ae3eab2efead71bd224c5761",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8fb044c3_4f54dcc3",
        "filename": "JniConstants.cpp",
        "patchSetId": 19
      },
      "lineNbr": 120,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2019-01-04T14:15:08Z",
      "side": 1,
      "message": "Thanks, yes, this pattern was inherited and I\u0027d not thought it through. Initialize() has been changed to EnsureInitialized() which uses relaxed accesses to an atomic boolean.\n\nFind{Field,Method} and FindClass are not pure. FindClass allocates global state in the runtime. FindMethod/FindClass can cause a class to be initialized (and for FileDescriptor here, we end-up recursing into FindField in that initialization).\n\nThe field and method initialization remain racy here, but the return values are non-gc heap pointers and the runtime is fine with concurrent calls here.\n\nUninitialize() is called to clean up when creating a new runtime. This should be safe as previous runtime (if any) must have been destroyed.\n\nDoes this seem reasonable?",
      "parentUuid": "33dbcdd6_9d46ffa3",
      "range": {
        "startLine": 120,
        "startChar": 8,
        "endLine": 120,
        "endChar": 33
      },
      "revId": "7c2d4e639fbd88d4ae3eab2efead71bd224c5761",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c291a93b_9a11ec4c",
        "filename": "JniConstants.cpp",
        "patchSetId": 19
      },
      "lineNbr": 120,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2019-01-07T23:56:14Z",
      "side": 1,
      "message": "It sounds like Uninitialize() should be OK. But I\u0027m still concerned about initialization. I\u0027ll comment on the new version.",
      "parentUuid": "8fb044c3_4f54dcc3",
      "range": {
        "startLine": 120,
        "startChar": 8,
        "endLine": 120,
        "endChar": 33
      },
      "revId": "7c2d4e639fbd88d4ae3eab2efead71bd224c5761",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "23ed790d_5742ccaa",
        "filename": "JniConstants.h",
        "patchSetId": 19
      },
      "lineNbr": 49,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2019-01-03T19:22:08Z",
      "side": 1,
      "message": "Maybe state explicitly that this must happen after all other calls are complete?",
      "range": {
        "startLine": 47,
        "startChar": 4,
        "endLine": 49,
        "endChar": 62
      },
      "revId": "7c2d4e639fbd88d4ae3eab2efead71bd224c5761",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4de7b5b1_e8afb753",
        "filename": "JniConstants.h",
        "patchSetId": 19
      },
      "lineNbr": 49,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2019-01-04T14:15:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "23ed790d_5742ccaa",
      "range": {
        "startLine": 47,
        "startChar": 4,
        "endLine": 49,
        "endChar": 62
      },
      "revId": "7c2d4e639fbd88d4ae3eab2efead71bd224c5761",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}