{
  "comments": [
    {
      "key": {
        "uuid": "4f5fca80_8f67b7fa",
        "filename": "header_only_include/nativehelper/scoped_primitive_array.h",
        "patchSetId": 2
      },
      "lineNbr": 62,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-11-30T21:24:27Z",
      "side": 1,
      "message": "nit: kNullable",
      "range": {
        "startLine": 62,
        "startChar": 30,
        "endLine": 62,
        "endChar": 38
      },
      "revId": "06e21fb00741e474f717b6c7ac27042c517f53d6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2bfb62bc_9e6f3a00",
        "filename": "header_only_include/nativehelper/scoped_primitive_array.h",
        "patchSetId": 2
      },
      "lineNbr": 62,
      "author": {
        "id": 1062848
      },
      "writtenOn": "2017-11-30T22:23:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4f5fca80_8f67b7fa",
      "range": {
        "startLine": 62,
        "startChar": 30,
        "endLine": 62,
        "endChar": 38
      },
      "revId": "06e21fb00741e474f717b6c7ac27042c517f53d6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "61ed88a9_05b5100d",
        "filename": "header_only_include/nativehelper/scoped_primitive_array.h",
        "patchSetId": 2
      },
      "lineNbr": 82,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-11-30T21:24:27Z",
      "side": 1,
      "message": "Where is the ScopedArrayRO(JNIEnv*, ArrayType) constructor?",
      "revId": "06e21fb00741e474f717b6c7ac27042c517f53d6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e3202a83_ac91ee8a",
        "filename": "header_only_include/nativehelper/scoped_primitive_array.h",
        "patchSetId": 2
      },
      "lineNbr": 82,
      "author": {
        "id": 1062848
      },
      "writtenOn": "2017-11-30T22:23:18Z",
      "side": 1,
      "message": "The constructor starts from line 71.",
      "parentUuid": "61ed88a9_05b5100d",
      "revId": "06e21fb00741e474f717b6c7ac27042c517f53d6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b837eaea_7128eeb2",
        "filename": "header_only_include/nativehelper/scoped_primitive_array.h",
        "patchSetId": 2
      },
      "lineNbr": 92,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-11-30T21:24:27Z",
      "side": 1,
      "message": "Don\u0027t need to get mSize for getArrayElements.",
      "revId": "06e21fb00741e474f717b6c7ac27042c517f53d6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "68a4fe2f_36b50fcd",
        "filename": "header_only_include/nativehelper/scoped_primitive_array.h",
        "patchSetId": 2
      },
      "lineNbr": 92,
      "author": {
        "id": 1062848
      },
      "writtenOn": "2017-11-30T22:23:18Z",
      "side": 1,
      "message": "How can we retrieve the size in case of getArrayElements?",
      "parentUuid": "b837eaea_7128eeb2",
      "revId": "06e21fb00741e474f717b6c7ac27042c517f53d6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5c0094fd_315f5888",
        "filename": "header_only_include/nativehelper/scoped_primitive_array.h",
        "patchSetId": 2
      },
      "lineNbr": 92,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-11-30T23:10:13Z",
      "side": 1,
      "message": "Well it could be done lazily.\n\nBut thinking about it some more, it would be very hard to use this without calling GetArrayLength (unless the size was a constant) so its probably an unnecessary micro-optimization.\n\nPlease ignore.",
      "parentUuid": "68a4fe2f_36b50fcd",
      "revId": "06e21fb00741e474f717b6c7ac27042c517f53d6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "56956490_68d422b5",
        "filename": "header_only_include/nativehelper/scoped_primitive_array.h",
        "patchSetId": 2
      },
      "lineNbr": 99,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-11-30T21:24:27Z",
      "side": 1,
      "message": "Whats with this distinction?\n\nOn ART, GetPrimitiveArrayElements is always better. Either it makes a copy, in which case it\u0027s always the same implementation as GetPrimitiveArrayRegion, *or* if the array is non-movable (e.g. because its a very large page-sized array or bigger) it doesn\u0027t make a copy at all.",
      "range": {
        "startLine": 92,
        "startChar": 40,
        "endLine": 99,
        "endChar": 5
      },
      "revId": "06e21fb00741e474f717b6c7ac27042c517f53d6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f399c699_3bb5065b",
        "filename": "header_only_include/nativehelper/scoped_primitive_array.h",
        "patchSetId": 2
      },
      "lineNbr": 99,
      "author": {
        "id": 1062848
      },
      "writtenOn": "2017-11-30T22:23:18Z",
      "side": 1,
      "message": "I don\u0027t have much context here, just copied from existing code.\n\nThis was introduced two years ago.\nhttps://android-review.googlesource.com/c/platform/libnativehelper/+/169683\nLooks that made some improvement at that time, but not sure how it is right now.\n\nI\u0027m sorry I don\u0027t have enough knowledge in ART to determine removing this or not.\n\nPersonally, I also don\u0027t like to have fixed 1024 length of buffer. In case of long array, this consumes 8096 bytes even for small array. Even if it improves the performance, it should be configurable by caller.\n\n+mathieuc, can you share any thought about this?",
      "parentUuid": "56956490_68d422b5",
      "range": {
        "startLine": 92,
        "startChar": 40,
        "endLine": 99,
        "endChar": 5
      },
      "revId": "06e21fb00741e474f717b6c7ac27042c517f53d6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6f463d50_7cde99b2",
        "filename": "header_only_include/nativehelper/scoped_primitive_array.h",
        "patchSetId": 2
      },
      "lineNbr": 99,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-11-30T23:10:13Z",
      "side": 1,
      "message": "Ok, I think I understand.\n\nThis is completely pointless for \u003e\u003d4096 sized bytes since that wouldn\u0027t make a copy anyway.\n\n  constexpr static jsize PAGE_SIZE \u003d 4096;\n  constexpr static jsize BUFFER_SIZE \u003d PAGE_SIZE / sizeof(JType);\n\nAnd lets leave some comments to explain this optimization.\n\nsomething like:\n\n  // Speed-up JNI array access for small arrays, see I703d7346de732199be1feadbead021c6647a554a for more details.",
      "parentUuid": "f399c699_3bb5065b",
      "range": {
        "startLine": 92,
        "startChar": 40,
        "endLine": 99,
        "endChar": 5
      },
      "revId": "06e21fb00741e474f717b6c7ac27042c517f53d6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2fe61fb6_db635219",
        "filename": "header_only_include/nativehelper/scoped_primitive_array.h",
        "patchSetId": 2
      },
      "lineNbr": 103,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-11-30T21:24:27Z",
      "side": 1,
      "message": "Maybe even add start/begin while you\u0027re at it, so it can be used with C++ for loop?\n\n  for (jint elem : ScopedArrayRO(jni_env, jint_array)) {\n     ...\n  }",
      "revId": "06e21fb00741e474f717b6c7ac27042c517f53d6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c3a48af8_7d51ace4",
        "filename": "header_only_include/nativehelper/scoped_primitive_array.h",
        "patchSetId": 2
      },
      "lineNbr": 103,
      "author": {
        "id": 1062848
      },
      "writtenOn": "2017-11-30T22:23:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2fe61fb6_db635219",
      "revId": "06e21fb00741e474f717b6c7ac27042c517f53d6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "880fcdc0_785a97b1",
        "filename": "header_only_include/nativehelper/scoped_primitive_array.h",
        "patchSetId": 2
      },
      "lineNbr": 105,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-11-30T21:24:27Z",
      "side": 1,
      "message": "Move operators?",
      "revId": "06e21fb00741e474f717b6c7ac27042c517f53d6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "28296113_90ac6f6e",
        "filename": "header_only_include/nativehelper/scoped_primitive_array.h",
        "patchSetId": 2
      },
      "lineNbr": 105,
      "author": {
        "id": 1062848
      },
      "writtenOn": "2017-11-30T22:23:18Z",
      "side": 1,
      "message": "Can I add when I remove reset method? Move operation makes even confuse the users with broken reset method.",
      "parentUuid": "880fcdc0_785a97b1",
      "revId": "06e21fb00741e474f717b6c7ac27042c517f53d6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "352165ea_e969b5f9",
        "filename": "header_only_include/nativehelper/scoped_primitive_array.h",
        "patchSetId": 2
      },
      "lineNbr": 105,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-11-30T23:10:13Z",
      "side": 1,
      "message": "Do you mean in a separate CL , in a separate patchset, ?",
      "parentUuid": "28296113_90ac6f6e",
      "revId": "06e21fb00741e474f717b6c7ac27042c517f53d6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0f42d4ad_373bb5a1",
        "filename": "header_only_include/nativehelper/scoped_primitive_array.h",
        "patchSetId": 2
      },
      "lineNbr": 113,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-11-30T21:24:27Z",
      "side": 1,
      "message": "Were you actually trying to do a small-string-optimization here (1024 is likely too big)? Otherwise see L99.",
      "revId": "06e21fb00741e474f717b6c7ac27042c517f53d6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "16337da2_8c5e62e2",
        "filename": "header_only_include/nativehelper/scoped_primitive_array.h",
        "patchSetId": 2
      },
      "lineNbr": 113,
      "author": {
        "id": 1062848
      },
      "writtenOn": "2017-11-30T22:23:18Z",
      "side": 1,
      "message": "I agree that this is too large, but I\u0027m sorry I don\u0027t have any numbers for optimization.",
      "parentUuid": "0f42d4ad_373bb5a1",
      "revId": "06e21fb00741e474f717b6c7ac27042c517f53d6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d6952b35_026eca79",
        "filename": "header_only_include/nativehelper/scoped_primitive_array.h",
        "patchSetId": 2
      },
      "lineNbr": 138,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-11-30T21:24:27Z",
      "side": 1,
      "message": "Is there a need for this? What about a helper function instead?\n\n  std::optional\u003cScopedArrayRO\u003cJType\u003e\u003e MaybeMakeScopedArrayRO(ArrayType arr) {\n    return arr \u003d\u003d nullptr ? std::nullopt_t : ScopedArrayRO\u003cJType\u003e(arr);\n  }",
      "revId": "06e21fb00741e474f717b6c7ac27042c517f53d6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "02f7f317_244a507a",
        "filename": "header_only_include/nativehelper/scoped_primitive_array.h",
        "patchSetId": 2
      },
      "lineNbr": 138,
      "author": {
        "id": 1062848
      },
      "writtenOn": "2017-11-30T22:23:18Z",
      "side": 1,
      "message": "nullopt is C++17 feature. I\u0027m hesitate to use it in utility headers.",
      "parentUuid": "d6952b35_026eca79",
      "revId": "06e21fb00741e474f717b6c7ac27042c517f53d6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6b5ad8c3_b95eb2ed",
        "filename": "header_only_include/nativehelper/scoped_primitive_array.h",
        "patchSetId": 2
      },
      "lineNbr": 138,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-11-30T23:10:13Z",
      "side": 1,
      "message": "This can use std::unique_ptr also (but it would be suboptimal performance for C++17). \n\nYou can check C++ version with #defines, we already do it to avoid using move semantics on pre-C++11 version.",
      "parentUuid": "02f7f317_244a507a",
      "revId": "06e21fb00741e474f717b6c7ac27042c517f53d6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d855e621_4860cfe2",
        "filename": "header_only_include/nativehelper/scoped_primitive_array.h",
        "patchSetId": 2
      },
      "lineNbr": 141,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-11-30T21:24:27Z",
      "side": 1,
      "message": "Can this inherit from ScopedArrayRO to avoid reimplementing half of the functionality?",
      "revId": "06e21fb00741e474f717b6c7ac27042c517f53d6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c2e362ac_cba4c795",
        "filename": "header_only_include/nativehelper/scoped_primitive_array.h",
        "patchSetId": 2
      },
      "lineNbr": 141,
      "author": {
        "id": 1062848
      },
      "writtenOn": "2017-11-30T22:23:18Z",
      "side": 1,
      "message": "If we get rid of getArrayRegion, yes, but I can\u0027t judge it.",
      "parentUuid": "d855e621_4860cfe2",
      "revId": "06e21fb00741e474f717b6c7ac27042c517f53d6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6752c3d0_525c2441",
        "filename": "header_only_include/nativehelper/scoped_primitive_array.h",
        "patchSetId": 2
      },
      "lineNbr": 141,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-11-30T23:10:13Z",
      "side": 1,
      "message": "Not sure I grok the code, what does getArrayRegion have to do with reusing the RO functionality?",
      "parentUuid": "c2e362ac_cba4c795",
      "revId": "06e21fb00741e474f717b6c7ac27042c517f53d6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}